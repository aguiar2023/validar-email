// Classe Product com propriedades e métodos especificados
class Product {
    constructor(name, price, barcode) {
        this.name = name;
        this.price = price;
        this.barcode = barcode;
    }

    // Método para validar o código de barras usando regex
    validateBarcode() {
        const barcodeRegex = /^\d{12}$/;
        return barcodeRegex.test(this.barcode);
    }

    // Método para aplicar desconto de 10% se o código de barras for válido
    applyDiscount() {
        if (this.validateBarcode()) {
            this.price *= 0.9;
        }
    }

    // Método assíncrono para simular a verificação de estoque
    async isProductInStock() {
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                if (this.name === "Phone") {
                    resolve("Produto em estoque.");
                } else {
                    resolve("Produto não está em estoque.");
                }
            }, 2000); // Simulação de chamada à API com tempo de resposta de 2 segundos
        });
    }
}

// Função assíncrona para utilizar a classe Product
async function main() {
    const product = new Product("Phone", 1000, "123456789012");
    console.log("Validando o código de barras...");
    if (!product.validateBarcode()) {
        console.log("Código de barras inválido!");
        return;
    }

    console.log("Aplicando desconto...");
    product.applyDiscount();
    console.log(`Preço após desconto: R$${product.price.toFixed(2)}`);

    console.log("Verificando o estoque...");
    const stockStatus = await product.isProductInStock();
    console.log(stockStatus);
}

main();
